// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/sqlc/querier.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	db "github.com/buranasakS/trading_application/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	pgx "github.com/jackc/pgx/v5"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddAffiliateBalance mocks base method.
func (m *MockQuerier) AddAffiliateBalance(ctx context.Context, arg db.AddAffiliateBalanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAffiliateBalance", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAffiliateBalance indicates an expected call of AddAffiliateBalance.
func (mr *MockQuerierMockRecorder) AddAffiliateBalance(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAffiliateBalance", reflect.TypeOf((*MockQuerier)(nil).AddAffiliateBalance), ctx, arg)
}

// AddUserBalance mocks base method.
func (m *MockQuerier) AddUserBalance(ctx context.Context, arg db.AddUserBalanceParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserBalance", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserBalance indicates an expected call of AddUserBalance.
func (mr *MockQuerierMockRecorder) AddUserBalance(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserBalance", reflect.TypeOf((*MockQuerier)(nil).AddUserBalance), ctx, arg)
}

// BeginTx mocks base method.
func (m *MockQuerier) BeginTx(ctx context.Context, options pgx.TxOptions) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, options)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockQuerierMockRecorder) BeginTx(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockQuerier)(nil).BeginTx), ctx, options)
}

// CheckUserExists mocks base method.
func (m *MockQuerier) CheckUserExists(ctx context.Context, id pgtype.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExists indicates an expected call of CheckUserExists.
func (mr *MockQuerierMockRecorder) CheckUserExists(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExists", reflect.TypeOf((*MockQuerier)(nil).CheckUserExists), ctx, id)
}

// Commit mocks base method.
func (m *MockQuerier) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockQuerierMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockQuerier)(nil).Commit), ctx)
}

// CountUsers mocks base method.
func (m *MockQuerier) CountUsers(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockQuerierMockRecorder) CountUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockQuerier)(nil).CountUsers), ctx)
}

// CreateAffiliate mocks base method.
func (m *MockQuerier) CreateAffiliate(ctx context.Context, arg db.CreateAffiliateParams) (db.Affiliate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAffiliate", ctx, arg)
	ret0, _ := ret[0].(db.Affiliate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAffiliate indicates an expected call of CreateAffiliate.
func (mr *MockQuerierMockRecorder) CreateAffiliate(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAffiliate", reflect.TypeOf((*MockQuerier)(nil).CreateAffiliate), ctx, arg)
}

// CreateCommission mocks base method.
func (m *MockQuerier) CreateCommission(ctx context.Context, arg db.CreateCommissionParams) (db.Commission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommission", ctx, arg)
	ret0, _ := ret[0].(db.Commission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommission indicates an expected call of CreateCommission.
func (mr *MockQuerierMockRecorder) CreateCommission(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommission", reflect.TypeOf((*MockQuerier)(nil).CreateCommission), ctx, arg)
}

// CreateProduct mocks base method.
func (m *MockQuerier) CreateProduct(ctx context.Context, arg db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockQuerierMockRecorder) CreateProduct(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockQuerier)(nil).CreateProduct), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// DeductProductQuantity mocks base method.
func (m *MockQuerier) DeductProductQuantity(ctx context.Context, arg db.DeductProductQuantityParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductProductQuantity", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeductProductQuantity indicates an expected call of DeductProductQuantity.
func (mr *MockQuerierMockRecorder) DeductProductQuantity(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductProductQuantity", reflect.TypeOf((*MockQuerier)(nil).DeductProductQuantity), ctx, arg)
}

// DeductUserBalance mocks base method.
func (m *MockQuerier) DeductUserBalance(ctx context.Context, arg db.DeductUserBalanceParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductUserBalance", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeductUserBalance indicates an expected call of DeductUserBalance.
func (mr *MockQuerierMockRecorder) DeductUserBalance(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductUserBalance", reflect.TypeOf((*MockQuerier)(nil).DeductUserBalance), ctx, arg)
}

// GetAffiliateByID mocks base method.
func (m *MockQuerier) GetAffiliateByID(ctx context.Context, id pgtype.UUID) (db.Affiliate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffiliateByID", ctx, id)
	ret0, _ := ret[0].(db.Affiliate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffiliateByID indicates an expected call of GetAffiliateByID.
func (mr *MockQuerierMockRecorder) GetAffiliateByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffiliateByID", reflect.TypeOf((*MockQuerier)(nil).GetAffiliateByID), ctx, id)
}

// GetAffiliateByUserID mocks base method.
func (m *MockQuerier) GetAffiliateByUserID(ctx context.Context, id pgtype.UUID) (db.GetAffiliateByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffiliateByUserID", ctx, id)
	ret0, _ := ret[0].(db.GetAffiliateByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffiliateByUserID indicates an expected call of GetAffiliateByUserID.
func (mr *MockQuerierMockRecorder) GetAffiliateByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffiliateByUserID", reflect.TypeOf((*MockQuerier)(nil).GetAffiliateByUserID), ctx, id)
}

// GetCommissionByID mocks base method.
func (m *MockQuerier) GetCommissionByID(ctx context.Context, id pgtype.UUID) (db.Commission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommissionByID", ctx, id)
	ret0, _ := ret[0].(db.Commission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommissionByID indicates an expected call of GetCommissionByID.
func (mr *MockQuerierMockRecorder) GetCommissionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommissionByID", reflect.TypeOf((*MockQuerier)(nil).GetCommissionByID), ctx, id)
}

// GetProductByID mocks base method.
func (m *MockQuerier) GetProductByID(ctx context.Context, id pgtype.UUID) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockQuerierMockRecorder) GetProductByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockQuerier)(nil).GetProductByID), ctx, id)
}

// GetUserByUsernameForLogin mocks base method.
func (m *MockQuerier) GetUserByUsernameForLogin(ctx context.Context, username string) (db.GetUserByUsernameForLoginRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsernameForLogin", ctx, username)
	ret0, _ := ret[0].(db.GetUserByUsernameForLoginRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsernameForLogin indicates an expected call of GetUserByUsernameForLogin.
func (mr *MockQuerierMockRecorder) GetUserByUsernameForLogin(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsernameForLogin", reflect.TypeOf((*MockQuerier)(nil).GetUserByUsernameForLogin), ctx, username)
}

// GetUserDetailByID mocks base method.
func (m *MockQuerier) GetUserDetailByID(ctx context.Context, id pgtype.UUID) (db.GetUserDetailByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetailByID", ctx, id)
	ret0, _ := ret[0].(db.GetUserDetailByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetailByID indicates an expected call of GetUserDetailByID.
func (mr *MockQuerierMockRecorder) GetUserDetailByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetailByID", reflect.TypeOf((*MockQuerier)(nil).GetUserDetailByID), ctx, id)
}

// ListAffiliates mocks base method.
func (m *MockQuerier) ListAffiliates(ctx context.Context) ([]db.Affiliate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAffiliates", ctx)
	ret0, _ := ret[0].([]db.Affiliate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAffiliates indicates an expected call of ListAffiliates.
func (mr *MockQuerierMockRecorder) ListAffiliates(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAffiliates", reflect.TypeOf((*MockQuerier)(nil).ListAffiliates), ctx)
}

// ListCommissions mocks base method.
func (m *MockQuerier) ListCommissions(ctx context.Context) ([]db.Commission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommissions", ctx)
	ret0, _ := ret[0].([]db.Commission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommissions indicates an expected call of ListCommissions.
func (mr *MockQuerierMockRecorder) ListCommissions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommissions", reflect.TypeOf((*MockQuerier)(nil).ListCommissions), ctx)
}

// ListProducts mocks base method.
func (m *MockQuerier) ListProducts(ctx context.Context) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockQuerierMockRecorder) ListProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockQuerier)(nil).ListProducts), ctx)
}

// ListUsers mocks base method.
func (m *MockQuerier) ListUsers(ctx context.Context, arg db.ListUsersParams) ([]db.ListUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]db.ListUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockQuerierMockRecorder) ListUsers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockQuerier)(nil).ListUsers), ctx, arg)
}

// Rollback mocks base method.
func (m *MockQuerier) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockQuerierMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockQuerier)(nil).Rollback), ctx)
}

// UserBalance mocks base method.
func (m *MockQuerier) UserBalance(ctx context.Context, id pgtype.UUID) (db.UserBalanceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBalance", ctx, id)
	ret0, _ := ret[0].(db.UserBalanceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserBalance indicates an expected call of UserBalance.
func (mr *MockQuerierMockRecorder) UserBalance(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBalance", reflect.TypeOf((*MockQuerier)(nil).UserBalance), ctx, id)
}
