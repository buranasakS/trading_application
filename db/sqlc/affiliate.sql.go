// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: affiliate.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addAffiliateBalance = `-- name: AddAffiliateBalance :exec
UPDATE affiliates SET balance = balance + $1 WHERE id = $2
`

type AddAffiliateBalanceParams struct {
	Balance float64     `json:"balance"`
	ID      pgtype.UUID `json:"id"`
}

func (q *Queries) AddAffiliateBalance(ctx context.Context, arg AddAffiliateBalanceParams) error {
	_, err := q.db.Exec(ctx, addAffiliateBalance, arg.Balance, arg.ID)
	return err
}

const createAffiliate = `-- name: CreateAffiliate :one
INSERT INTO affiliates (name, master_affiliate, balance)
VALUES ($1, $2, 0)
RETURNING id, name, master_affiliate, balance
`

type CreateAffiliateParams struct {
	Name            string      `json:"name"`
	MasterAffiliate pgtype.UUID `json:"master_affiliate"`
}

func (q *Queries) CreateAffiliate(ctx context.Context, arg CreateAffiliateParams) (Affiliate, error) {
	row := q.db.QueryRow(ctx, createAffiliate, arg.Name, arg.MasterAffiliate)
	var i Affiliate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MasterAffiliate,
		&i.Balance,
	)
	return i, err
}

const getAffiliateByID = `-- name: GetAffiliateByID :one
SELECT id, name, master_affiliate, balance FROM affiliates WHERE id = $1
`

func (q *Queries) GetAffiliateByID(ctx context.Context, id pgtype.UUID) (Affiliate, error) {
	row := q.db.QueryRow(ctx, getAffiliateByID, id)
	var i Affiliate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MasterAffiliate,
		&i.Balance,
	)
	return i, err
}

const getAffiliateByUserID = `-- name: GetAffiliateByUserID :one
SELECT id, master_affiliate FROM affiliates WHERE id = $1
`

type GetAffiliateByUserIDRow struct {
	ID              pgtype.UUID `json:"id"`
	MasterAffiliate pgtype.UUID `json:"master_affiliate"`
}

func (q *Queries) GetAffiliateByUserID(ctx context.Context, id pgtype.UUID) (GetAffiliateByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getAffiliateByUserID, id)
	var i GetAffiliateByUserIDRow
	err := row.Scan(&i.ID, &i.MasterAffiliate)
	return i, err
}

const listAffiliates = `-- name: ListAffiliates :many
SELECT id, name, master_affiliate, balance FROM affiliates
`

func (q *Queries) ListAffiliates(ctx context.Context) ([]Affiliate, error) {
	rows, err := q.db.Query(ctx, listAffiliates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Affiliate{}
	for rows.Next() {
		var i Affiliate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MasterAffiliate,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
