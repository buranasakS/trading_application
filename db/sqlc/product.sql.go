// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, quantity, price) VALUES ($1, $2, $3) RETURNING id, name, quantity, price
`

type CreateProductParams struct {
	Name     string  `json:"name"`
	Quantity int32   `json:"quantity"`
	Price    float64 `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.Quantity, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const deductProductQuantity = `-- name: DeductProductQuantity :execrows
UPDATE products SET quantity = quantity - $1 WHERE id = $2 AND quantity >= $1
`

type DeductProductQuantityParams struct {
	Quantity int32       `json:"quantity"`
	ID       pgtype.UUID `json:"id"`
}

func (q *Queries) DeductProductQuantity(ctx context.Context, arg DeductProductQuantityParams) (int64, error) {
	result, err := q.db.Exec(ctx, deductProductQuantity, arg.Quantity, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, quantity, price FROM products WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id pgtype.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, quantity, price FROM products
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
