// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addAffiliateBalance = `-- name: AddAffiliateBalance :exec
UPDATE affiliates SET balance = balance + $1 WHERE id = $2
`

type AddAffiliateBalanceParams struct {
	Balance float64
	ID      pgtype.UUID
}

func (q *Queries) AddAffiliateBalance(ctx context.Context, arg AddAffiliateBalanceParams) error {
	_, err := q.db.Exec(ctx, addAffiliateBalance, arg.Balance, arg.ID)
	return err
}

const addUserBalance = `-- name: AddUserBalance :exec
UPDATE users SET balance = balance + $1 WHERE id = $2
`

type AddUserBalanceParams struct {
	Balance float64
	ID      pgtype.UUID
}

func (q *Queries) AddUserBalance(ctx context.Context, arg AddUserBalanceParams) error {
	_, err := q.db.Exec(ctx, addUserBalance, arg.Balance, arg.ID)
	return err
}

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE id = $1)
`

func (q *Queries) CheckUserExists(ctx context.Context, id pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAffiliate = `-- name: CreateAffiliate :one
INSERT INTO affiliates (name, master_affiliate, balance)
VALUES ($1, $2, 0)
RETURNING id, name, master_affiliate, balance
`

type CreateAffiliateParams struct {
	Name            string
	MasterAffiliate pgtype.UUID
}

func (q *Queries) CreateAffiliate(ctx context.Context, arg CreateAffiliateParams) (Affiliate, error) {
	row := q.db.QueryRow(ctx, createAffiliate, arg.Name, arg.MasterAffiliate)
	var i Affiliate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MasterAffiliate,
		&i.Balance,
	)
	return i, err
}

const createCommission = `-- name: CreateCommission :one
INSERT INTO commissions (order_id, affiliate_id, amount) VALUES ($1, $2, $3) RETURNING id, order_id, affiliate_id, amount
`

type CreateCommissionParams struct {
	OrderID     pgtype.UUID
	AffiliateID pgtype.UUID
	Amount      float64
}

func (q *Queries) CreateCommission(ctx context.Context, arg CreateCommissionParams) (Commission, error) {
	row := q.db.QueryRow(ctx, createCommission, arg.OrderID, arg.AffiliateID, arg.Amount)
	var i Commission
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.AffiliateID,
		&i.Amount,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, quantity, price) VALUES ($1, $2, $3) RETURNING id, name, quantity, price
`

type CreateProductParams struct {
	Name     string
	Quantity int32
	Price    float64
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.Quantity, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, affiliate_id) VALUES ($1, $2) RETURNING id, username, balance, affiliate_id
`

type CreateUserParams struct {
	Username    string
	AffiliateID pgtype.UUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.AffiliateID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.AffiliateID,
	)
	return i, err
}

const deductProductQuantity = `-- name: DeductProductQuantity :execrows
UPDATE products SET quantity = quantity - $1 WHERE id = $2 AND quantity >= $1
`

type DeductProductQuantityParams struct {
	Quantity int32
	ID       pgtype.UUID
}

func (q *Queries) DeductProductQuantity(ctx context.Context, arg DeductProductQuantityParams) (int64, error) {
	result, err := q.db.Exec(ctx, deductProductQuantity, arg.Quantity, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deductUserBalance = `-- name: DeductUserBalance :execrows
UPDATE users SET balance = balance - $1 WHERE id = $2 AND balance >= $1
`

type DeductUserBalanceParams struct {
	Balance float64
	ID      pgtype.UUID
}

func (q *Queries) DeductUserBalance(ctx context.Context, arg DeductUserBalanceParams) (int64, error) {
	result, err := q.db.Exec(ctx, deductUserBalance, arg.Balance, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAffiliateByID = `-- name: GetAffiliateByID :one
SELECT id, name, master_affiliate, balance FROM affiliates WHERE id = $1
`

func (q *Queries) GetAffiliateByID(ctx context.Context, id pgtype.UUID) (Affiliate, error) {
	row := q.db.QueryRow(ctx, getAffiliateByID, id)
	var i Affiliate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MasterAffiliate,
		&i.Balance,
	)
	return i, err
}

const getAffiliateByUserID = `-- name: GetAffiliateByUserID :one
SELECT id, master_affiliate FROM affiliates WHERE id = $1
`

type GetAffiliateByUserIDRow struct {
	ID              pgtype.UUID
	MasterAffiliate pgtype.UUID
}

func (q *Queries) GetAffiliateByUserID(ctx context.Context, id pgtype.UUID) (GetAffiliateByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getAffiliateByUserID, id)
	var i GetAffiliateByUserIDRow
	err := row.Scan(&i.ID, &i.MasterAffiliate)
	return i, err
}

const getCommissionByID = `-- name: GetCommissionByID :one
SELECT id, order_id, affiliate_id, amount FROM commissions WHERE id = $1
`

func (q *Queries) GetCommissionByID(ctx context.Context, id pgtype.UUID) (Commission, error) {
	row := q.db.QueryRow(ctx, getCommissionByID, id)
	var i Commission
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.AffiliateID,
		&i.Amount,
	)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, quantity, price FROM products WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id pgtype.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const getUserDetailByID = `-- name: GetUserDetailByID :one
SELECT id, username, balance, affiliate_id FROM users WHERE id = $1
`

func (q *Queries) GetUserDetailByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserDetailByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.AffiliateID,
	)
	return i, err
}

const listAffiliates = `-- name: ListAffiliates :many
SELECT id, name, master_affiliate, balance FROM affiliates
`

func (q *Queries) ListAffiliates(ctx context.Context) ([]Affiliate, error) {
	rows, err := q.db.Query(ctx, listAffiliates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Affiliate
	for rows.Next() {
		var i Affiliate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MasterAffiliate,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommissions = `-- name: ListCommissions :many
SELECT id, order_id, affiliate_id, amount FROM commissions
`

func (q *Queries) ListCommissions(ctx context.Context) ([]Commission, error) {
	rows, err := q.db.Query(ctx, listCommissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Commission
	for rows.Next() {
		var i Commission
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.AffiliateID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, quantity, price FROM products
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, balance, affiliate_id
FROM users
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Balance,
			&i.AffiliateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userBalance = `-- name: UserBalance :one
SELECT id, balance FROM users WHERE id = $1
`

type UserBalanceRow struct {
	ID      pgtype.UUID
	Balance float64
}

func (q *Queries) UserBalance(ctx context.Context, id pgtype.UUID) (UserBalanceRow, error) {
	row := q.db.QueryRow(ctx, userBalance, id)
	var i UserBalanceRow
	err := row.Scan(&i.ID, &i.Balance)
	return i, err
}
